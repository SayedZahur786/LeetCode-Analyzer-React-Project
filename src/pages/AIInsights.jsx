import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaSpinner, FaDownload, FaRobot } from 'react-icons/fa';
import { useUserData } from '../context/UserDataContext';
import { generateInsights } from '../utils/geminiApi';
import { generatePDF } from '../utils/pdfGenerator';

function AIInsights() {
  const { userData, codingDuration } = useUserData();
  const [insights, setInsights] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const insightsRef = useRef(null);

  useEffect(() => {
    if (!userData) {
      navigate('/stats');
      return;
    }

    const fetchInsights = async () => {
      setIsLoading(true);
      try {
        const response = await generateInsights(userData, codingDuration);
        setInsights(response);
      } catch (err) {
        setError('Failed to generate insights. Please try again later.');
        console.error(err);
      } finally {
        setIsLoading(false);
      }
    };

    fetchInsights();
  }, [userData, navigate, codingDuration]);

  const handleDownloadPDF = async () => {
    if (!insightsRef.current) return;

    const username = userData?.username || 'user';
    const filename = `leetcode-insights-${username}.pdf`;

    const success = await generatePDF(insightsRef.current, filename);
    if (success) {
      alert('PDF downloaded successfully!');
    } else {
      alert('Failed to generate PDF. Please try again.');
    }
  };

  const formatInsightsText = (text) => {
    if (!text) return '<p class="text-gray-500">No insights available.</p>';

    try {
      let intermediateText = text
        .replace(/^# (.*$)/gm, '<h1 class="text-2xl font-bold mt-6 mb-3 text-gray-800">$1</h1>')
        .replace(/^## (.*$)/gm, '<h2 class="text-xl font-bold mt-5 mb-2 text-gray-800">$1</h2>')
        .replace(/^### (.*$)/gm, '<h3 class="text-lg font-bold mt-4 mb-2 text-gray-700">$1</h3>')
        .replace(/^\* (.*$)/gm, '<li class="ml-6 list-disc my-1">$1</li>')
        .replace(/^- (.*$)/gm, '<li class="ml-6 list-disc my-1">$1</li>')
        .replace(/^\d+\. (.*$)/gm, '<li class="ml-6 list-decimal my-1">$1</li>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/^([^<].*$)/gm, (match) => {
          if (match.trim() === '') return '';
          if (match.startsWith('<')) return match;
          return `<p class="my-2">${match}</p>`;
        });

      let formattedText = intermediateText
        .replace(/(<li class="ml-6 list-disc my-1">.*?<\/li>)/g, '<ul class="my-3">$1</ul>')
        .replace(/(<li class="ml-6 list-decimal my-1">.*?<\/li>)/g, '<ol class="my-3">$1</ol>');

      return formattedText;
    } catch (err) {
      console.error('Formatting error:', err);
      return `<pre class="text-red-500">Error rendering insights. Here's raw:\n${text}</pre>`;
    }
  };

  return (
    <div className="pt-24 pb-16">
      <div className="container-custom mx-auto px-4">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800">AI-Powered Insights</h1>

          {insights && !isLoading && (
            <button onClick={handleDownloadPDF} className="btn btn-secondary flex items-center">
              <FaDownload className="mr-2" /> Download PDF
            </button>
          )}
        </div>

        {isLoading ? (
          <div className="flex flex-col items-center justify-center py-20">
            <FaSpinner className="text-primary-500 text-4xl animate-spin mb-4" />
            <p className="text-gray-600">Our AI is analyzing your LeetCode performance...</p>
          </div>
        ) : error ? (
          <div className="bg-red-100 border border-red-400 text-red-700 px-6 py-4 rounded shadow-sm">
            <h3 className="text-xl font-semibold mb-2">Error</h3>
            <p>{error}</p>
          </div>
        ) : (
          <div className="card p-6 bg-white rounded-lg shadow-md" ref={insightsRef}>
            <div className="flex items-center mb-6">
              <div className="bg-blue-100 text-blue-600 w-12 h-12 rounded-full flex items-center justify-center mr-4 text-2xl">
                <FaRobot />
              </div>
              <div>
                <h2 className="text-xl font-semibold text-gray-800">
                  Your LeetCode Performance Summary
                </h2>
                <p className="text-gray-600 text-sm">Generated by Gemini AI</p>
              </div>
            </div>

            <div
              className="prose prose-lg max-w-none text-gray-800"
              dangerouslySetInnerHTML={{
                __html: formatInsightsText(insights),
              }}
            />
          </div>
        )}
      </div>
    </div>
  );
}

export default AIInsights;
